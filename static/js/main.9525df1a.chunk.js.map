{"version":3,"sources":["util.js","App.js","reportWebVitals.js","index.js"],"names":["getColors","num","Block","blockStyle","style","background","color","height","width","margin","display","justifyContent","alignItems","fontSize","fontWeight","newGameButton","padding","borderRadius","marginLeft","marginBottom","cursor","tryAgainButton","marginTop","gameOverOverlay","position","left","top","h4","font","App","useState","data","setData","gameOver","setGameOver","addNum","newGrid","added","gridFull","attempts","rand1","Math","floor","random","rand2","checkIfGameOver","alert","swipeLeft","dummy","console","log","oldGrid","newArray","cloneDeep","i","arr","slow","fast","JSON","stringify","swipeRight","oldData","length","swipeDown","parse","swipeUp","checker","checker2","table","checker3","checker4","resetGame","emptyGrid","useEffect","initialize","event","handler","passive","window","addEventListener","removeEventListener","useEvent","keyCode","className","fontFamily","flex","onClick","onSwipeDown","onSwipeLeft","onSwipeRight","onSwipeUp","overflowY","map","row","oneIndex","digit","index","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9525df1a.chunk.js","sourcesContent":["  \r\nimport { useEffect } from \"react\";\r\n\r\nexport const useEvent = (event, handler, passive = false) => {\r\n  useEffect(() => {\r\n    // initiate the event handler\r\n    window.addEventListener(event, handler, passive);\r\n\r\n    // this will clean up the event every time the component is re-rendered\r\n    return function cleanup() {\r\n      window.removeEventListener(event, handler);\r\n    };\r\n  });\r\n};\r\n\r\nexport const getColors = (num) => {\r\n  switch (num) {     //this will change color upon the number of turns\r\n    case 2:\r\n      return \"#373737\";\r\n    case 4:\r\n      return \"#3fe0d0\";\r\n    case 8:\r\n      return \"#3fe0d0\";\r\n    case 16:\r\n      return \"#F08151\";\r\n    case 32:\r\n      return \"#F2654F\";\r\n    case 64:\r\n      return \"#F1462C\";\r\n    case 128:\r\n      return \"#E7C65E\";\r\n    case 256:\r\n      return \"#E8C350\";\r\n    case 512:\r\n      return \"#E8BE40\";\r\n    case 1024:\r\n      return \"#E8BB31\";\r\n    case 2048:\r\n      return \"#E7B723\";\r\n    default:\r\n      return \"#C2B3A3\";\r\n  }\r\n};","import React, { useState, useEffect } from \"react\";   //useEffect for the rendering after any action\nimport cloneDeep from \"lodash.clonedeep\";\nimport { useEvent, getColors } from \"./util\";\nimport Swipe from \"react-easy-swipe\";\n\n/*\nGAME LOgic:\n\nthe game consist of 4 cross 4 matrix and if all are initialized with 0 then each array in 2d matrix after putting a random it will be:\na array as:  {2,0,0,2}\nthe after adding more element it will be an array of for example : {2,4,8,2};\n\nso using pointers in each array as slow for the 0th index and the 1th index thus iterating over the each array .\n---> check for same check for case given below in swipe left and add if same\n\n\n\n*/\n\n\n\nfunction App() {\n  const UP_ARROW = 38;  //assinging the ascii to the variable\n  const DOWN_ARROW = 40;  //assigning the ascii to the variable\n  const LEFT_ARROW = 37;  //assinging the ascii to the variable\n  const RIGHT_ARROW = 39;  //assinging the ascii to the variable\n\n//used react Hooks as useState to collect data from setData function into data var on initialization with 0 on all\n  const [data, setData] = useState([\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ]);\n\n  const [gameOver, setGameOver] = useState(false); //useState for initializing setGameOver with false \n\n  // Initialize\n  const initialize = () => {\n    // console.log(\"CALLING INITIALIZE\");\n\n    let newGrid = cloneDeep(data); //deep clone to show the effect on original array\n    console.log(newGrid);\n\n   //log statements\n    addNum(newGrid);\n    console.table(newGrid);\n    addNum(newGrid);\n    console.table(newGrid);\n    setData(newGrid);\n  };\n\n  // AddNumber - Add an item\n  const addNum = (newGrid) => {\n    let added = false;\n    let gridFull = false;\n    let attempts = 0;\n    while (!added) {\n      if (gridFull) {\n        break;\n      }\n\n      let rand1 = Math.floor(Math.random() * 4);\n      let rand2 = Math.floor(Math.random() * 4);\n\n     //number of random number generated equals number of attempts\n\n      attempts++;\n      if (newGrid[rand1][rand2] === 0)\n       {\n        newGrid[rand1][rand2] = Math.random() > 0.5 ? 2 : 4;  //if math.random > 0.5 then get the 2 else 4\n        added = true;\n      }\n      if (attempts > 50) {\n        gridFull = true;\n        let gameOverr = checkIfGameOver();\n        if (gameOverr) {\n          alert(\"game over Click on New to play Again!\");\n          \n        }\n       \n      }\n    }\n  };\n  // Swipe Left\n  const swipeLeft = (dummy) => {\n    console.log(\"swipe left\");\n    let oldGrid = data;   //getting data from the original array\n    let newArray = cloneDeep(data);   //making a deepclone of the original array\n\n    for (let i = 0; i < 4; i++) {\n      let arr = newArray[i];  //can be taken as a 1D array iterating line by line\n\n      let slow = 0;   //pointing to the 0th index of the array\n      let fast = 1;   //pointing to the 1th index of the array\n\n\n      while (slow < 4) \n      {\n        if (fast === 4)  //when fast reaches the last of the current array\n         {\n          fast = slow + 1;  \n          slow++;\n          continue;\n        }\n        if (arr[slow] === 0 && arr[fast] === 0)//case when both are zero then move fast ahead \n        {\n          fast++;\n        } \n        else if (arr[slow] === 0 && arr[fast] !== 0)  //case when element at slow is 0 and element at fast is non zero then exchange both elements thus create shift\n         {\n          arr[slow] = arr[fast];\n          arr[fast] = 0;\n          fast++;\n        } \n        else if (arr[slow] !== 0 && arr[fast] === 0)  // case if element at slow is non zero and element at fast is zero then move fast ahead\n         {\n          fast++;\n        } \n        else if (arr[slow] !== 0 && arr[fast] !== 0) //case when both are non zero check for equal \n         {\n          if (arr[slow] === arr[fast]) {\n            arr[slow] = arr[slow] + arr[fast];  //add both in element in the element at slow\n            arr[fast] = 0;\n            fast = slow + 1;\n            slow++;\n          } else\n          {\n            slow++;\n            fast = slow + 1;\n          }\n        }\n      }\n    }\n    if (JSON.stringify(oldGrid) !== JSON.stringify(newArray))  //use to check for the same array as old arrya\n    {\n      addNum(newArray);\n    }\n    if (dummy) \n    {\n      return newArray;\n    } else \n    {\n      setData(newArray);\n    }\n  };\n  \n  const swipeRight = (dummy) => {\n    console.log(\"swipe right\");\n    let oldData = data;\n    let newArray = cloneDeep(data);\n\n\n    //iterating in the array from the last \n    //code logic same as left swipe\n\n    for (let i = 3; i >= 0; i--) {\n      let arr = newArray[i];\n      let slow = arr.length - 1;\n      let fast = slow - 1;\n      while (slow > 0) {\n        if (fast === -1) {\n          fast = slow - 1;\n          slow--;\n          continue;\n        }\n        if (arr[slow] === 0 && arr[fast] === 0) \n        {\n          fast--;\n        } else if (arr[slow] === 0 && arr[fast] !== 0) \n        {\n          arr[slow] = arr[fast];\n          arr[fast] = 0;\n          fast--;\n        } else if (arr[slow] !== 0 && arr[fast] === 0)\n         {\n          fast--;\n        } else if (arr[slow] !== 0 && arr[fast] !== 0)\n         {\n          if (arr[slow] === arr[fast]) {\n            arr[slow] = arr[slow] + arr[fast];\n            arr[fast] = 0;\n            fast = slow - 1;\n            slow--;\n          } else \n          {\n            slow--;\n            fast = slow - 1;\n          }\n        }\n      }\n    }\n\n    if (JSON.stringify(newArray) !== JSON.stringify(oldData)) {\n      addNum(newArray);\n    }\n    if (dummy) {\n      return newArray;\n    } else {\n      setData(newArray);\n    }\n  };\n //code logic for the swipe up and down is same but the iteration is bit different as we iterating in one column therefore used 2d array\n\n  const swipeDown = (dummy) => {\n    console.log(\"swipe down\");\n    console.log(data);\n    let arr = cloneDeep(data);\n\n    let oldData = JSON.parse(JSON.stringify(data));\n\n    for (let i = 3; i >= 0; i--)\n     {\n      let slow = arr.length - 1;\n      let fast = slow - 1;\n      while (slow > 0)\n       {\n        if (fast === -1) \n        {\n          fast = slow - 1;\n          slow--;\n          continue;\n        }\n\n        if (arr[slow][i] === 0 && arr[fast][i] === 0) \n        {\n          fast--;\n        } else if (arr[slow][i] === 0 && arr[fast][i] !== 0) \n        {\n          arr[slow][i] = arr[fast][i];\n          arr[fast][i] = 0;\n          fast--;\n        } else if (arr[slow][i] !== 0 && arr[fast][i] === 0)\n         {\n          fast--;\n        } else if (arr[slow][i] !== 0 && arr[fast][i] !== 0)\n         {\n          if (arr[slow][i] === arr[fast][i]) {\n            arr[slow][i] = arr[slow][i] + arr[fast][i];\n            arr[fast][i] = 0;\n            fast = slow - 1;\n            slow--;\n          } else\n           {\n            slow--;\n            fast = slow - 1;\n          }\n        }\n      }\n    }\n    if (JSON.stringify(arr) !== JSON.stringify(oldData))\n     {\n      addNum(arr);\n    }\n    if (dummy) {\n      return arr;\n    } else {\n      setData(arr);\n    }\n  };\n\n  const swipeUp = (dummy) => {\n    console.log(\"swipe up\");\n    let arr = cloneDeep(data);\n    let oldData = JSON.parse(JSON.stringify(data));\n    for (let i = 0; i < 4; i++)\n     {\n      let slow = 0;\n      let fast = 1;\n      while (slow < 4)\n       {\n        if (fast === 4) \n        {\n          fast = slow + 1;\n          slow++;\n          continue;\n        }\n        if (arr[slow][i] === 0 && arr[fast][i] === 0) \n        {\n          fast++;\n        } else if (arr[slow][i] === 0 && arr[fast][i] !== 0) \n        {\n          arr[slow][i] = arr[fast][i];\n          arr[fast][i] = 0;\n          fast++;\n        } else if (arr[slow][i] !== 0 && arr[fast][i] === 0)\n         {\n          fast++;\n        } else if (arr[slow][i] !== 0 && arr[fast][i] !== 0) \n        {\n          if (arr[slow][i] === arr[fast][i])\n           {\n            arr[slow][i] = arr[slow][i] + arr[fast][i];\n            arr[fast][i] = 0;\n            fast = slow + 1;\n            slow++;\n          } else {\n            slow++;\n            fast = slow + 1;\n          }\n        }\n      }\n    }\n    if (JSON.stringify(oldData) !== JSON.stringify(arr))\n     {\n      addNum(arr);\n    }\n    if (dummy) \n    {\n      return arr;\n    } else {\n      setData(arr);\n    }\n  };\n\n  // Check Gameover\n  const checkIfGameOver = () => {\n    console.log(\"CHECKING GAME OVER\");\n \n    let checker = swipeLeft(true);\n\n    if (JSON.stringify(data) !== JSON.stringify(checker)) {\n      return false;\n    }\n\n    let checker2 = swipeDown(true);\n    console.log(\"CHECKER DOWN\");\n    console.table(data);\n    console.table(checker2);\n    if (JSON.stringify(data) !== JSON.stringify(checker2)) {\n      return false;\n    }\n\n    let checker3 = swipeRight(true);\n\n    if (JSON.stringify(data) !== JSON.stringify(checker3)) {\n      return false;\n    }\n\n    let checker4 = swipeUp(true);\n\n    if (JSON.stringify(data) !== JSON.stringify(checker4)) {\n      return false;\n    }\n\n    return true;\n  };\n  // Reset\n  const resetGame = () => {\n    setGameOver(false);\n    const emptyGrid = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    addNum(emptyGrid);\n    addNum(emptyGrid);\n    setData(emptyGrid);\n  };\n\n  const handleKeyDown = (event) => {\n    if (gameOver) {\n      return;\n    }\n    switch (event.keyCode) {\n      case UP_ARROW:\n      \n        swipeUp();\n      \n        break;\n      case DOWN_ARROW:\n       \n        swipeDown();\n      \n        break;\n      case LEFT_ARROW:\n       \n        swipeLeft();\n      \n        break;\n      case RIGHT_ARROW:\n      \n        swipeRight();\n      \n        break;\n      default:\n        break;\n    }\n\n    let gameOverr = checkIfGameOver();\n    if (gameOverr) {\n      setGameOver(true);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // This is a custom function\n  useEvent(\"keydown\", handleKeyDown);\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          width: 345,\n          margin: \"auto\",\n          marginTop: 30,\n        }}\n      >\n        <div style={{ display: \"flex\" }}>\n          <div\n            style={{\n              fontFamily: \"sans-serif\",\n              flex: 1,\n              fontWeight: \"700\",\n              fontSize: 60,\n              color: \"#776e65\",\n            }}\n          >\n            2048\n          </div>\n          <div\n            style={{\n              flex: 1,\n              marginTop: \"auto\",\n            }}\n          >\n            <div onClick={resetGame} style={style.newGameButton}>\n              NEW GAME\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            background: \"#AD9D8F\",\n            width: \"max-content\",\n            height: \"max-content\",\n            margin: \"auto\",\n            padding: 5,\n            borderRadius: 5,\n            marginTop: 10,\n            position: \"relative\",\n          }}\n        >\n          {gameOver && (\n            <div style={style.gameOverOverlay}>\n              <div>\n                <div\n                  style={{\n                    fontSize: 30,\n                    fontFamily: \"sans-serif\",\n                    fontWeight: \"900\",\n                    color: \"#776E65\",\n                  }}\n                >\n                  Game Over\n                </div>\n                <div>\n                  <div\n                    style={{\n                      flex: 1,\n                      marginTop: \"auto\",\n                    }}\n                  >\n                    <div onClick={resetGame} style={style.tryAgainButton}>\n                      Try Again\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          <Swipe\n            onSwipeDown={() => {\n              swipeDown();\n            }}\n            onSwipeLeft={() => swipeLeft()}\n            onSwipeRight={() => swipeRight()}\n            onSwipeUp={() => swipeUp()}\n            style={{ overflowY: \"hidden\" }}\n          >\n            {data.map((row, oneIndex) => {\n              return (\n                <div style={{ display: \"flex\" }} key={oneIndex}>\n                  {row.map((digit, index) => (\n                    <Block num={digit} key={index} />\n                  ))}\n                </div>\n              );\n            })}\n          </Swipe>\n        </div>\n\n        <div style={{ width: \"inherit\" }}>\n          <p class=\"game-explanation\">\n            <strong class=\"important\">How to play:</strong> Use your{\" \"}\n            <strong>arrow keys</strong> to move the tiles. When two tiles with\n            the same number touch, they <strong>merge into one!</strong>\n          </p>\n          \n          <h4>Game Rule</h4>\n          <p>\n          2048 is an easy and fun puzzle game. Even if you don't love numbers you will love this game.\n\n          This game is mobile compatible and you can play it on any device - iPhone, iPad or any other smartphone.\n          </p>\n\n\n\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Block = ({ num }) => {\n  const { blockStyle } = style;\n\n  return (\n    <div\n      style={{\n        ...blockStyle,\n        background: getColors(num),\n        color: num === 2 || num === 4 ? \"#fff\" : \"#373737\",\n      }}\n    >\n      {num !== 0 ? num : \"\"}\n    </div>\n  );\n};\n\nconst style = {\n  blockStyle: {\n    height: 80,\n    width: 80,\n    background: \"#fff\",\n    margin: 3,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 45,\n    fontWeight: \"800\",\n    color: \"white\",\n  },\n  newGameButton: {\n    padding: 10,\n    background: \"#846F5B\",\n    color: \"#F8F5F0\",\n    width: 95,\n    borderRadius: 7,\n    fontWeight: \"900\",\n    marginLeft: \"auto\",\n    marginBottom: \"auto\",\n    cursor: \"pointer\",\n  },\n  tryAgainButton: {\n    padding: 10,\n    background: \"#846F5B\",\n    color: \"#F8F5F0\",\n    width: 80,\n    borderRadius: 7,\n    fontWeight: \"900\",\n    cursor: \"pointer\",\n    margin: \"auto\",\n    marginTop: 20,\n  },\n  gameOverOverlay: {\n    position: \"absolute\",\n    height: \"100%\",\n    width: \"100%\",\n    left: 0,\n    top: 0,\n    borderRadius: 5,\n    background: \"rgba(238,228,218,.5)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n\n  h4:{\n    font:\"background-color:white\",\n  }\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}